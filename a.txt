1.
#include<stdio.h>
#include<stdlib.h>
#include<omp.h>
void main() {
	int m,n;
	printf("Enter the size of square matrix : ");
	scanf_s("%d",&n);
	printf("Enter the size of vector : ");
	scanf_s("%d", &m);
	if (m!=n) {
		printf("Multiplication is not possible.\n");
		exit(0);
	}
	int i=0,j=0;
	int **arr=(int**)malloc(n*sizeof(int*));
	int *vec=(int*)malloc(n*sizeof(int));
	int *res=(int*)malloc(n*sizeof(int));
	omp_set_num_threads(n);
	#pragma omp parallel private(j)
	{
		#pragma omp for
		for (i=0;i<n;i++) {
			srand(i);
			arr[i]=(int*)malloc(n*sizeof(int));
			vec[i]=rand()%100;
			for (j=0;j<n;j++)
				arr[i][j]=rand()%100;
		}
	}
	#pragma omp parallel private(j)
	{
		#pragma omp for
		for(i=0;i<n;i++) {
			res[i]=0;
			for(j=0;j<n;j++)
				res[i]+=arr[i][j]*vec[j];
		}
	}
	printf("Matrix * Vector = Resultant Matrix\n");
	for(i=0;i<n;i++) {
		for(j=0;j<n;j++)
			printf("%3d ",arr[i][j]);
		if(i==n/2)
			printf("  *  %3d  = %6d\n",vec[i],res[i]);
		else
			printf("     %3d    %6d\n",vec[i],res[i]);
	}
}

2.
  #include<stdio.h>
#include<stdlib.h>
#include<omp.h>
void main() {
    int r,i,ans=0;
    printf("Enter number of sections : ");
    scanf_s("%d",&r);
    int **arr=(int**)malloc(r*sizeof(int*));
    int *size=(int*)malloc(r*sizeof(int));
    omp_set_num_threads(r);
	#pragma omp parallel
    {
        #pragma omp for
        for (i=0;i<r;i++) {
            srand(i);
            int j,sum=0;
            size[i]=rand()%20;
		    arr[i]=(int*)malloc(size[i]*sizeof(int));
		    for (j=0;j<size[i];j++) {
			    arr[i][j]=rand()%100;
                sum+=arr[i][j];
            }
            #pragma omp critical
                ans+=sum;
	    }
    }
    for(i=0;i<r;i++) {
        printf("Section - %2d ( %3d Items ) : ",i,size[i]);
        for(int j=0;j<size[i];j++)
            printf("%3d ",arr[i][j]);
        printf("\n");
    }
    printf("Total Amount : %d",ans);
}
3.
  #include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<omp.h>
void main() {
    int num,i;
    printf("Enter the number of steps : ");
    scanf_s("%d",&num);
    time_t st,et;
    st=clock();
    double step=1.0/(double)num,pi=0.0;
    omp_set_num_threads(num);
    #pragma omp parallel for reduction(+:pi)
    for(i=0;i<num;i++) {
        double x=(i+0.5)*step;
        double local_pi=(4.0*step)/(1+x*x);
        pi+=local_pi;
    }
    et=clock();
    printf("Time Taken : %lf\n",(double)((double)(et-st)/CLOCKS_PER_SEC));
    printf("Value of Pi = %.16lf\n",pi);
}
4.
  #include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<omp.h>
int main() {
	int n, i;
	printf("Number of terms : ");
	scanf_s("%d",&n);
	int* a = (int*)malloc(n * sizeof(int));
	a[0] = 0;
	a[1] = 1;
	time_t st, et;
	st = clock();
	omp_set_num_threads(2);
	#pragma omp parallel
	{
		#pragma omp single
		{
			printf("id of thread involved in the computation of fibonacci numbers = %d\n", omp_get_thread_num());
			for (i = 2; i < n; i++)
				a[i] = a[i - 2] + a[i - 1];
		}
		#pragma omp single
		{
			printf("id of thread involved in the displaying of fibonacci numbers = %d\n", omp_get_thread_num());
			printf("Fibonacci numbers : ");
			for (i = 0; i < n; i++)
				printf("%d ", a[i]);
			printf("\n");
		}
	}
	et = clock();
	printf("Time Taken : %lfms\n", ((double)(et - st)*1000 / CLOCKS_PER_SEC));
	return 0;
}
5.
  #include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<omp.h>
int main() {
	int n, i;
	time_t st, et;
	st = clock();
	printf("Enter the number of students : ");
	scanf_s("%d", &n);
	double* arr = (double*)malloc(n * sizeof(double));
	double arr_max = 0;
	#pragma omp parallel for
	for (i = 0; i < n; i++) {
		srand(i);
		arr[i] = (double)(rand() % 10000)/10 ;
	}
	printf("CGPA of students : ");
	for (i = 0; i < n; i++)
		printf("%.2lf ", arr[i]);
	printf("\n");
	#pragma omp parallel for
	for (i = 0; i < n; i++) {
		#pragma omp critical
		if (arr_max < arr[i])
			arr_max = arr[i];
	}
	et = clock();
	printf("Student with highest CGPA = %.2lf\n", arr_max);
	printf("Time Taken : %.2lfms\n", ((double)(et - st) * 1000 / CLOCKS_PER_SEC));
}
6.
  #include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<omp.h>
void main() {
	int n;
	printf("Enter the dimension of square matrices : ");
	scanf_s("%d", &n);
	int i = 0, j = 0, k = 0;
	int** arr1 = (int**)malloc(n * sizeof(int*));
	int** arr2 = (int**)malloc(n * sizeof(int*));
	int** res = (int**)malloc(n * sizeof(int*));
	omp_set_num_threads(64);
	#pragma omp parallel private(j)
	{
		#pragma omp for
		for (i = 0; i < n; i++) {
			srand(i);
			arr1[i] = (int*)malloc(n * sizeof(int));
			arr2[i] = (int*)malloc(n * sizeof(int));
			res[i] = (int*)malloc(n * sizeof(int));
			for (j = 0; j < n; j++) {
				arr1[i][j] = rand() % 100;
				arr2[i][j] = rand() % 100;
			}
		}
	}
	time_t st, et;
	st = clock();
	#pragma omp parallel private(j,k)
	{
		#pragma omp for
		for (i = 0; i < n; i++) {
			for (j = 0; j < n; j++) {
				res[i][j] = 0;
				for (k = 0; k < n; k++)
					res[i][j] += arr1[i][k] * arr2[k][j];
			}
		}
	}
	et = clock();
	printf("Time taken by parallel algorithm : %lf\n", (double)(et - st) / CLOCKS_PER_SEC);
	st = clock();
	for (i = 0; i < n; i++) {
		for (j = 0; j < n; j++) {
			res[i][j] = 0;
			for (k = 0; k < n; k++)
				res[i][j] += arr1[i][k] * arr2[k][j];
		}
	}
	et = clock();
	printf("Time taken by Sequential algorithm : %lf\n", (double)(et - st) / CLOCKS_PER_SEC);
}
